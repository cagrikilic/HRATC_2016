//author Mrinmoy sarkar
//email: sarkar.mrinmoy.bd@ieee.org

#include <ros/ros.h>
#include <actionlib/client/simple_action_client.h>
#include <actionlib/client/terminal_state.h>
#include <control_msgs/FollowJointTrajectoryAction.h>
#include <iostream>
#include <math.h>
#include <tf/transform_listener.h>
#include <tf/message_filter.h>
#include <message_filters/subscriber.h>
#include <metal_detector_msgs/Coil.h>
#include <std_msgs/Bool.h>
#include <std_msgs/Float64MultiArray.h>
#include <tf/tf.h>
#include <geometry_msgs/PoseStamped.h>
#include <cstring>

using namespace std;

class metal_detector
{
    public:
        metal_detector(ros::NodeHandle *nh);    
    private:
        ros::NodeHandle *nh_;       
        int coil_number; 
        message_filters::Subscriber<metal_detector_msgs::Coil> md_sub_;
        tf::TransformListener tf_;
        tf::MessageFilter<metal_detector_msgs::Coil> * tf_filter_;
        ros::NodeHandle n_;
        std::string target_frame_;
        double mine_pos_x[100];
        double mine_pos_y[100];
        int detected_mine_no;
        
        ros::Publisher pub_mine_pos;
        ros::Publisher pub_mine;
      
        bool already_detected(double x,double y);
        void msgCallback(const boost::shared_ptr<const metal_detector_msgs::Coil>& coil_ptr);  
        void set_mine(double x, double y);  
};

metal_detector::metal_detector(ros::NodeHandle *nh):nh_(nh),tf_(),  target_frame_("minefield")
{
    coil_number = 0;
    md_sub_.subscribe(n_, "coils", 10);
    tf_filter_ = new tf::MessageFilter<metal_detector_msgs::Coil>(md_sub_, tf_, target_frame_, 10);
    tf_filter_->registerCallback( boost::bind(&metal_detector::msgCallback, this, _1) );  
    pub_mine_pos = nh_->advertise<geometry_msgs::PoseStamped>("/HRATC_FW/set_mine", 1);
    pub_mine = nh_->advertise<std_msgs::Float64MultiArray>("/teamd_mine_pos", 1000); 
    detected_mine_no = 0;
     
}

bool metal_detector::already_detected(double x,double y)
{
    for(int i=0;i<detected_mine_no;i++)
    {
        double dx = x - mine_pos_x[i];
        double dy = y - mine_pos_y[i];
        if((dx*dx + dy*dy) < 0.27)
        {
            return true;
        }
    }
    return false;
}

void metal_detector::set_mine(double x, double y)
{
    ros::NodeHandle pn("~");
    std::string frame_id;
    pn.param<std::string>("frame_id", frame_id, "minefield");
    geometry_msgs::PoseStamped mine_pose;
    mine_pose.header.stamp = ros::Time::now();
    mine_pose.header.frame_id = frame_id;
    // We're actually only using a point x y...
    mine_pose.pose.position.x = x;
    mine_pose.pose.position.y = y;
    mine_pose.pose.position.z = 0.0;
    mine_pose.pose.orientation = tf::createQuaternionMsgFromYaw(0.0);

    //ROS_INFO("Setting a mine on x:%lf y:%lf", x, y);

    pub_mine_pos.publish(mine_pose);
}



 

void metal_detector::msgCallback(const boost::shared_ptr<const metal_detector_msgs::Coil>& coil_ptr)
{  
    geometry_msgs::PointStamped point_in;
    point_in.header.frame_id = coil_ptr->header.frame_id;
    point_in.header.stamp = coil_ptr->header.stamp;
    point_in.point.x = 0.0;
    point_in.point.y = 0.0;
    point_in.point.z = 0.0;
    
    geometry_msgs::PointStamped point_out;
    try
    {
        tf_.transformPoint(target_frame_, point_in, point_out);
        int ch1 = coil_ptr->channel[0];
        int ch2 = coil_ptr->channel[1];
        int ch1z = coil_ptr->zero[0];
        int ch2z = coil_ptr->zero[1];
        int num = ch2 - ch2z;
        int den = ch1 - ch1z;
        double beta = den != 0? double(num)/double(den) : -200.0;
        double signature = beta != 1? beta/(1-beta) : -100.0; 
        num = ch2z;
        den = ch2z - ch1z;
        double alpha = den != 0? double(num)/double(den) : 0.0;
        double detection_alert = alpha * ch1 + (1 - alpha)*ch2;
        //cout << coil_ptr->header.frame_id.c_str() << " detection_alert:" << detection_alert << endl; //" alpha:" << alpha <<      
        //cout << coil_ptr->header.frame_id.c_str()  << "  Signature:" << signature << endl;//<< " BETA:" << beta
        if(strcmp("middle_coil",coil_ptr->header.frame_id.c_str()) == 0)
        {
            //cout << "MIDDLE COIL"<<endl;
            //cout << coil_ptr->header.frame_id.c_str()  << "  Signature:" << signature << " detection_alert:" << detection_alert << endl;
            if(signature < -1.12)
            {
                //cout << "MINE FOUND No Of mines: " << detected_mine_no <<endl;
                if(detected_mine_no >= 1)
                {
                    if(!already_detected(point_out.point.x,point_out.point.y))
                    {                        
                        mine_pos_x[detected_mine_no]  = point_out.point.x; 
                        mine_pos_y[detected_mine_no]  = point_out.point.y;
                        detected_mine_no++;
                        std_msgs::Float64MultiArray pos_data;
                        pos_data.data.resize(2);
                        pos_data.data[0] = point_out.point.x;
                        pos_data.data[1] = point_out.point.y;
                        pub_mine.publish(pos_data);
                        set_mine(point_out.point.x,point_out.point.y);
                        cout << "SIGNATURE: " << signature << endl;
                    }
                    
                }
                else
                {
                    std_msgs::Float64MultiArray pos_data;
                    pos_data.data.resize(2);
                    pos_data.data[0] = point_out.point.x;
                    pos_data.data[1] = point_out.point.y;
                    pub_mine.publish(pos_data);
                    set_mine(point_out.point.x,point_out.point.y);
                    mine_pos_x[detected_mine_no]  = point_out.point.x; 
                    mine_pos_y[detected_mine_no]  = point_out.point.y;
                    detected_mine_no++;
                    cout << "SIGNATURE: " << signature << endl;
                }
             }
        }
     }
     catch (tf::TransformException &ex)
     {
         ROS_WARN("Failure %s\n", ex.what());
     }   
}


int main(int argc, char **argv)
{
    ros::init(argc, argv, "mine_detector_node");
    ros::NodeHandle n;
    metal_detector md(&n);
    ros::spin();
    return 0;
}
