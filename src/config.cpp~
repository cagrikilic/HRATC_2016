#include "config.h"

#include <ros/ros.h>
#include <sstream>
#include <angles/angles.h>
#include "UTMConverter.h"
#include "UTMConverter.cpp"
#include <visualization_msgs/Marker.h>
#include <std_msgs/Float64MultiArray.h>
#include <iostream>
#include <fstream>

std_msgs::Float64MultiArray Corners_and_dimension;
ros::Publisher corner_publisher;

using namespace std;

Config::Config(ros::NodeHandle *nh) : n(nh)
{
    canStart=false;
    n = nh;
    sub_corners = n->subscribe("/corners", 100, &Config::readMinefieldCornersFromTopic, this);

    tf::Vector3 pos = getMinefieldOrigin();
    //ROS_INFO("Config -- Minefield Center x:%lf y:%lf z:%lf", pos.x(), pos.y(), pos.z());
    Corners_and_dimension.data.resize(14);
    Corners_and_dimension.data[0] = pos.x();//centre x 
    Corners_and_dimension.data[1] = pos.y();// centre y
    Corners_and_dimension.data[2] = 0;
    Corners_and_dimension.data[3] = 0;
    Corners_and_dimension.data[4] = 0; 
    Corners_and_dimension.data[5] = 0;
    Corners_and_dimension.data[6] = 0;
    Corners_and_dimension.data[7] = 0;
    Corners_and_dimension.data[8] = 0;
    Corners_and_dimension.data[9] = 0;
    Corners_and_dimension.data[10] = 0; 
    Corners_and_dimension.data[11] = 0;
    Corners_and_dimension.data[12] = 0;
    Corners_and_dimension.data[13] = 0;

    //ros::Rate* rate = new ros::Rate(20);
   // rate->sleep();

    //readMinefieldCorners();
//    while(!canStart){
//        ros::spinOnce();
//        rate->sleep();
//    }

   
}

void Config::readMinefieldCornersFromTopic(const visualization_msgs::MarkerArray::ConstPtr & corners)
{
    if(canStart)
        return;

    
    
    for(int i=0; i<corners->markers.size(); i++){
//        visualization_msgs::Marker& m = corners->markers[i];
        minefieldCorners.push_back(tf::Vector3(corners->markers[i].pose.position.x, corners->markers[i].pose.position.y, corners->markers[i].pose.position.z));
    }
    cout << "Total corner point:  " <<corners->markers.size()<< endl;
    
    for(int T=0;T<1;T++)
    {
    // Convert minefield corners in relation to tf/minefield frame
        for(int i = (T==0?0:4); i < (T==0?4:minefieldCorners.size()); i++)
        {
            geometry_msgs::PointStamped pointIn, pointOut;
            pointIn.header.frame_id = "/odom";
            pointIn.point.x = minefieldCorners[i].x();
            pointIn.point.y = minefieldCorners[i].y();
            pointIn.point.z = minefieldCorners[i].z();

            try
            {
                listener.transformPoint("/minefield", pointIn, pointOut);
            }
            catch (tf::TransformException &ex)
            {
                ROS_WARN("Failure %s\n", ex.what());
            }

            minefieldCorners[i][0] = pointOut.point.x;
            minefieldCorners[i][1] = pointOut.point.y;
            minefieldCorners[i][2] = pointOut.point.z;
        }

    //ROS_INFO("Config -- Minefield Corners in /minefield frame");
    //for(int i=0; i<minefieldCorners.size(); i++)
    //{
        //ROS_INFO("Config -- Corner%d x:%lf y:%lf z:%lf", i+1, minefieldCorners[i].x(), minefieldCorners[i].y(), minefieldCorners[i].z());
   // }
    // Find boundaries
        lowerBound=upperBound=(T==0?minefieldCorners[0]:minefieldCorners[4]);
        for(int i = (T==0?0:4); i < (T==0?4:minefieldCorners.size()); ++i){
            lowerBound[0] = min(minefieldCorners[i].x(),lowerBound.x());
            lowerBound[1] = min(minefieldCorners[i].y(),lowerBound.y());
            lowerBound[2] = min(minefieldCorners[i].z(),lowerBound.z());
            upperBound[0] = max(minefieldCorners[i].x(),upperBound.x());
            upperBound[1] = max(minefieldCorners[i].y(),upperBound.y());
            upperBound[2] = max(minefieldCorners[i].z(),upperBound.z());
        }
        lowerBound[0] -= 0.2;
        lowerBound[1] -= 0.2;
        upperBound[0] += 0.2;
        upperBound[1] += 0.2;

        width = upperBound.x()-lowerBound.x();
        height = upperBound.y()-lowerBound.y();
        //ROS_INFO("Config -- Minefield xi:%lf xf:%lf yi:%lf yf:%lf = w:%lf h:%lf", lowerBound.x(),     upperBound.x(), lowerBound.y(), upperBound.y(), width, height);

    
        


        if(T == 0)
        {
            Corners_and_dimension.data[2] = lowerBound.x();
            Corners_and_dimension.data[3] = upperBound.x();
            Corners_and_dimension.data[4] = lowerBound.y(); 
            Corners_and_dimension.data[5] = upperBound.y();
            Corners_and_dimension.data[6] = width;
            Corners_and_dimension.data[7] = height;
        }
        else
        {
            Corners_and_dimension.data[8] = lowerBound.x();
            Corners_and_dimension.data[9] = upperBound.x();
            Corners_and_dimension.data[10] = lowerBound.y(); 
            Corners_and_dimension.data[11] = upperBound.y();
            Corners_and_dimension.data[12] = width;
            Corners_and_dimension.data[13] = height;
        }
    }
    
    ros::Rate loop_rate(1);
    int count = 10;
    
    while (ros::ok() && count !=0)
    {
        count--;
        corner_publisher.publish(Corners_and_dimension);
        ros::spinOnce();
        loop_rate.sleep();
    }
    

    canStart = true;
    readMinefieldCorners();
}

tf::Vector3 Config::getMinefieldOrigin()
{
    tf::StampedTransform transform;
    tf::Vector3 origin;

    bool success;
    while(!success){
        try{
            success=true;
            // faster lookup transform so far
            listener.lookupTransform("/odom", "/minefield", ros::Time(0), transform);

        }
        catch (tf::TransformException &ex) {
            success=false;
            ros::Duration(0.05).sleep();
        }
    }

    origin[0] = transform.getOrigin().x();
    origin[1] = transform.getOrigin().y();
    origin[2] = transform.getOrigin().z();
    return origin;
}

void Config::readMinefieldCorners()
{
    string s, s1, s2, s3;
    stringstream ss;

    // Get minefield corners
    int count=1;
    while(true){
        ss.str("");
        ss << count;
        s = "minefield/corner"+ss.str();

        if(!n->hasParam(s))
            break;

        // Convert the GPS coordinates into UTM coordinates
        UTMCoordinates utm;
        sensor_msgs::NavSatFix fix;

        s1 = s+"/latitude";
        s2 = s+"/longitude";
        s3 = s+"/altitude";

        if(!n->hasParam(s1) && !n->hasParam(s2) && !n->hasParam(s3))
        {
            ROS_FATAL("Config -- Unable to start without the 4 corners of the minefield!!!");
            ROS_BREAK();
        }
        n->getParam(s1, fix.latitude);
        n->getParam(s2, fix.longitude);
        n->getParam(s3, fix.altitude);

        UTMConverter::latitudeAndLongitudeToUTMCoordinates(fix, utm);
        minefieldCorners.push_back(tf::Vector3(utm.easting, utm.northing, fix.altitude));

        count++;
    }

//    ROS_INFO("Config -- Minefield Corners in /odom frame");
//    for(int i=0; i<minefieldCorners.size(); i++)
//        ROS_INFO("Config -- Corner%d x:%lf y:%lf z:%lf", i+1, minefieldCorners[i].x(), minefieldCorners[i].y(), minefieldCorners[i].z());

    // Convert minefield corners in relation to tf/minefield frame
    for(int i=0; i<minefieldCorners.size(); i++){
        geometry_msgs::PointStamped pointIn, pointOut;
        pointIn.header.frame_id = "/odom";
        pointIn.point.x = minefieldCorners[i].x();
        pointIn.point.y = minefieldCorners[i].y();
        pointIn.point.z = minefieldCorners[i].z();

        try
        {
            listener.transformPoint("/minefield", pointIn, pointOut);
        }
        catch (tf::TransformException &ex)
        {
            ROS_WARN("Failure %s\n", ex.what());
        }

        minefieldCorners[i][0] = pointOut.point.x;
        minefieldCorners[i][1] = pointOut.point.y;
        minefieldCorners[i][2] = pointOut.point.z;
    }

    //ROS_INFO("Config -- Minefield Corners in /minefield frame");
    for(int i=0; i<minefieldCorners.size(); i++)
    {
        //ROS_INFO("Config -- Corner%d x:%lf y:%lf z:%lf", i+1, minefieldCorners[i].x(), minefieldCorners[i].y(), minefieldCorners[i].z());
    }
    // Find boundaries
    lowerBound=upperBound=minefieldCorners[0];
    for(int i=1; i<minefieldCorners.size(); ++i){
        lowerBound[0] = min(minefieldCorners[i].x(),lowerBound.x());
        lowerBound[1] = min(minefieldCorners[i].y(),lowerBound.y());
        lowerBound[2] = min(minefieldCorners[i].z(),lowerBound.z());
        upperBound[0] = max(minefieldCorners[i].x(),upperBound.x());
        upperBound[1] = max(minefieldCorners[i].y(),upperBound.y());
        upperBound[2] = max(minefieldCorners[i].z(),upperBound.z());
    }
    lowerBound[0] -= 0.2;
    lowerBound[1] -= 0.2;
    upperBound[0] += 0.2;
    upperBound[1] += 0.2;

    width = upperBound.x()-lowerBound.x();
    height = upperBound.y()-lowerBound.y();
    //ROS_INFO("Config -- Minefield xi:%lf xf:%lf yi:%lf yf:%lf = w:%lf h:%lf", lowerBound.x(), upperBound.x(), lowerBound.y(), upperBound.y(), width, height);
    
}

bool Config::hasEnded()
{
    return canStart;
}


int main(int argc, char ** argv)
{
    ros::init(argc, argv, "Load_Corner");
    ros::NodeHandle nh;
    Config config(&nh);

    ros::NodeHandle n;
    corner_publisher = n.advertise<std_msgs::Float64MultiArray>("corner_and_dimension", 1000);
    ros::spin();
    return 0;
}
